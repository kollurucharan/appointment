----------------funtion to return the available slots to procedure which is generating slots------------

CREATE OR REPLACE FUNCTION get_nofslots(
    docid INT,sindex int,
    input_date DATE
)
RETURNS INT
LANGUAGE plpgsql
AS $$
declare
    schedule_cursor CURSOR (docid INT,sindex int, input_date DATE) FOR
        SELECT doctorschedule,doctoravailableslot, doctorslotindex
        FROM doctor_schedule
        WHERE doctorid = docid and  doctorslotindex=sindex; 
	schstring varchar(20);
	sind int;
	slotavai int;
	dayt int:=EXTRACT(dow FROM input_date);
	contains_number boolean;
begin
 IF FOUND THEN
        CLOSE schedule_cursor;
    END IF;
open schedule_cursor(docid ,sindex, input_date);
fetch schedule_cursor into schstring,slotavai,sind ;
	contains_number:=schstring like '%'|| dayt || '%';
	CLOSE schedule_cursor;
	if contains_number then 
		return slotavai;
	else 
	
		return 0;
	 
	end if;

	
END;
$$;
	




--------------------to delete previous dates of current dates------------------------

create or replace procedure prevDateDelete(slotdate1 Date)
as $$
begin 
raise notice 'this is to delete previous dates';
delete from lrc_slot where slotdate < slotdate1 ;
end;
$$ language plpgsql;

function to return no of slots need to be there for a day


CREATE OR REPLACE FUNCTION occured(
    docid INT,
    input_date DATE
)
RETURNS INT
LANGUAGE plpgsql
AS $$
declare
occured int;
begin
select count(*) from lrc_slot where slotdoctorid=docid AND slotdate=input_date into occured;


return occured;
END;
$$;


---------------------main procedure to generate the slots to a given id-------------------------


CREATE OR REPLACE PROCEDURE InsertAppointmentsFromDoctorsAndPatients(docid int) AS $$
DECLARE
    cur_doctors CURSOR(docid int) FOR SELECT doctorslotindex,doctorschedule,doctoravailablefrom,doctoravailableto,doctoravailabelslot,doctortreattime FROM lrc_sch where doctorid=docid; 
    dindex int;
    docsche varchar(20);
	docfrom time;
	docto time;
	docslots int;
	docrange int;
	slotdate Date:=current_date+1;
	nofoslot int;
	counter int;
	counter2 int;
	occured int;
	tot int;
	doc_tr_time int;
BEGIN
	    SELECT dayrange INTO docrange FROM doctrange WHERE doctorid = docid;
		call prevDateDelete(slotdate);
	for counter in 1..docrange loop
   OPEN cur_doctors(docid);
		raise notice '%',counter;
    LOOP
        FETCH cur_doctors INTO dindex,docsche,docfrom,docto,docslots,doc_tr_time;
		EXIT WHEN NOT FOUND;
		nofoslot:=get_nofslots(docid, dindex, slotdate);
		tot:=tot+nofoslot;
		select occured(docid,slotdate) into occured;
		if nofoslot>0 then 
			for counter2 in 1..nofoslot-occured loop
			docto := docfrom + (doc_tr_time || ' minutes')::interval;
			
			insert into lrc_slot (slotdoctorid,slotdate,slotfrom,slotto,slotstatus)values(docid,slotdate,docfrom,docto,'Available');
			docfrom:=docto;
			end loop;
			end if;
		
    END LOOP;
    CLOSE cur_doctors;
	if tot=0 then counter:=counter-1; end if;
	slotdate:=slotdate+1;
	raise notice 'slot date:%',slotdate;
end loop;
END;
$$ LANGUAGE plpgsql;



---------------------------procedure to generate slots for all doctors at a time using main procedure----------------

CREATE OR REPLACE PROCEDURE AllDoctors() AS $$
DECLARE
	n int;
    cur_AllDoctors CURSOR FOR SELECT doctorid  FROM lrc_doctor ; 
    
BEGIN
	    
   OPEN cur_AllDoctors;
	
    LOOP
	
        FETCH cur_AllDoctors INTO n;
		EXIT WHEN NOT FOUND;
	
		call InsertAppointmentsFromDoctorsAndPatients(n);
		
		
end loop;
close cur_AllDoctors;
END;
$$ LANGUAGE plpgsql;


----------------------------function for trigger of insertion into patients table---------------------	

CREATE OR REPLACE FUNCTION update_slot_column()
RETURNS TRIGGER AS $$
BEGIN
    -- Your logic here to update the lrc_slot table based on the lrc_patients insertion
    -- For example, you can use an UPDATE statement with the provided parameters
    UPDATE lrc_slot
    SET slotstatus = 'booked'
    WHERE  slotdate = NEW.dates
        AND slotfrom = NEW.from_time
        AND slotto = NEW.to_time
        AND slotdoctorid = NEW.docid;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE TRIGGER patient_trigger
AFTER INSERT
ON lrc_patients
FOR EACH ROW
EXECUTE FUNCTION update_slot_column();



-------------------------------trigger for insertion into the doc schedule table---------------------------

CREATE OR REPLACE FUNCTION insert_into_lrc_slot()
RETURNS TRIGGER AS $$
BEGIN
    call	 InsertAppointmentsFromDoctorsAndPatients(NEW.doctorid);  

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER insert_lrc_slot_trigger
AFTER INSERT
ON lrc_sch
FOR EACH ROW
EXECUTE FUNCTION insert_into_lrc_slot();


---------------------------trigger for updation of record in the doc schedule table-------------


CREATE OR REPLACE FUNCTION update_lrc_slot()
RETURNS TRIGGER AS $$
BEGIN
	delete from lrc_slot where slotdoctorid=NEW.doctorid;

     call	 InsertAppointmentsFromDoctorsAndPatients(NEW.doctorid);  

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger that fires AFTER UPDATE on the doctorschedule_bhaskar table
CREATE TRIGGER update_lrc_slot_trigger
AFTER UPDATE
ON lrc_sch
FOR EACH ROW
EXECUTE FUNCTION update_lrc_slot();


